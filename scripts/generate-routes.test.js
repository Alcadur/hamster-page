describe('scripts/generate-routes', function () {
    let fsMock;

    beforeEach(function () {
        jest.mock('fs', () => ({
            readdirSync: jest.fn(),
            lstatSync: jest.fn((path) => {
                const fileOrDir = path.split('/').at(-1);

                return {
                    isDirectory: () => fileOrDir.substring(0, 3) === 'dir'
                };
            }),
            writeFileSync: jest.fn()
        }));

        fsMock = require('fs');
    });

    afterEach(function () {
        jest.resetModules();
        jest.resetAllMocks();
    });

    describe('file creation', function () {
        beforeEach(function () {
            fsMock.readdirSync.mockReturnValueOnce([]);
        });

        it('should save file under "./src/config/routes.js" with "w" flag', function () {
            require('./generate-routes');

            const writeFileSyncFirstCall = fsMock.writeFileSync.mock.calls[0];

            expect(writeFileSyncFirstCall[0]).toEqual('./src/config/routes.js');
            expect(writeFileSyncFirstCall[2].flag).toEqual('w');
        });
    });

    describe('static content', function () {
        beforeEach(function () {
            fsMock.readdirSync.mockReturnValueOnce([]);
        });

        it('should add generated info in first line', function () {
            require('./generate-routes');

            const fileContentLines = getWriteFileSyncFileContentLines(fsMock);

            expect(fileContentLines[0]).toEqual('// That file was generated by src/scripts/generated-routes.js run it again to update');
        });
    });

    describe('flat structure', function () {
        /**
         * @param {string[]} flatStructure
         */
        function prepare(flatStructure) {
            fsMock.readdirSync.mockReturnValue([])
                .mockReturnValueOnce(flatStructure);
        }

        it('should generate correct routes', function () {
            prepare(['dir1', 'dir2', 'file', 'dir4-with-dash']);

            require('./generate-routes');

            const fileContentLines = getWriteFileSyncFileContentLines(fsMock);

            expect(fileContentLines).toHaveLength(4);
            expect(fileContentLines[1]).toEqual('export const DIR1 = "/dir1";');
            expect(fileContentLines[2]).toEqual('export const DIR2 = "/dir2";');
            expect(fileContentLines[3]).toEqual('export const DIR4_WITH_DASH = "/dir4-with-dash";');

        });

        it('should sort content ascending', function () {
            prepare(['dir-bbb', 'dir-ccc', 'file', 'dir-aaa']);

            require('./generate-routes');

            const fileContentLines = getWriteFileSyncFileContentLines(fsMock);

            expect(fileContentLines).toHaveLength(4);
            expect(fileContentLines[1]).toEqual('export const DIR_AAA = "/dir-aaa";');
            expect(fileContentLines[2]).toEqual('export const DIR_BBB = "/dir-bbb";');
            expect(fileContentLines[3]).toEqual('export const DIR_CCC = "/dir-ccc";');
        });
    });
});

/**
 * @param fsMock
 * @param {number} callIndex
 * @returns {string[]}
 */
function getWriteFileSyncFileContentLines(fsMock, callIndex = 0) {
    return fsMock.writeFileSync.mock.calls[callIndex][1].split('\n');
}